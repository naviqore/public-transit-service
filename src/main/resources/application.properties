# ==============================================
# LOGGING
# ==============================================
# Sets the root logging level for the application, INFO is recommended.
logging.level.root=${LOG_LEVEL:INFO}
# ==============================================
# GTFS
# ==============================================
# URL or file path to a static GTFS feed. The service will initially fetch the GTFS from this URL. If the provided
# value is a file path, the GTFS is loaded from the file and the update interval is ignored. Examples:
# - gtfs.static.uri=benchmark/input/switzerland.zip
# - gtfs.static.uri=https://opentransportdata.swiss/en/dataset/timetable-2024-gtfs2020/permalink
# - gtfs.static.uri=https://connolly.ch/zuerich-trams.zip
gtfs.static.uri=${GTFS_STATIC_URI:src/test/resources/ch/naviqore/gtfs/schedule/sample-feed-1.zip}
# Cron expression for updating the static GTFS feed from the provided URL. Public transit agencies update their static
# GTFS data regularly. Set this interval to match the agency's publish schedule. Default is to update the schedule
# daily at 4 AM.
gtfs.static.update.cron=${GTFS_STATIC_UPDATE_CRON:0 0 4 * * *}
# ==============================================
# TRANSFER
# ==============================================
# Default transfer time between same stop transfers in seconds. If GTFS already provides same stop transfer times,
# those have precedence over this default. If the value is set to 0, no additional same stop transfer times are set.
transfer.time.same.stop.default=${TRANSFER_TIME_SAME_STOP_DEFAULT:120}
# Minimum transfer time between the different stops in seconds. If stops are closer than this, this time has precedence
# over the actual walking time, which accounts for leaving the station building, stairways, etc. If GTFS already
# provides a transfer time between two stops, the GTFS time has precedence over this minimum. If the value is set to -1,
# no additional transfers will be created.
transfer.time.between.stops.minimum=${TRANSFER_TIME_BETWEEN_STOPS_MINIMUM:-1}
# Time in seconds required to access or egress from a public transit trip. This time is added twice to the walking
# duration of transfers between two stops and once to first and last mile walking legs.
transfer.time.access.egress=${TRANSFER_TIME_ACCESS_EGRESS:15}
# ==============================================
# WALKING
# ==============================================
# Search radius in meters. No walks with a longer beeline distance between origin and destination will appear in
# connections (first/last mile and between stop transfers). The actual distance of the walk might be longer.
# Note: This radius is also used to generate same stop transfers.
walking.search.radius=${WALKING_SEARCH_RADIUS:500}
# Type of walking calculator used to calculate walking distances. Currently only BEE_LINE_DISTANCE is supported.
walking.calculator.type=${WALKING_CALCULATOR_TYPE:BEE_LINE_DISTANCE}
# Walking speed in meters per second. The default value is based on the average preferred walking speed.
# Source: https://en.wikipedia.org/wiki/Preferred_walking_speed
walking.speed=${WALKING_SPEED:1.4}
# Minimum walking duration in seconds. If the walking duration, without access or egress time (see
# 'TRANSFER_TIME_ACCESS_EGRESS'), is shorter, no first or last mile walk is needed to reach the location. This avoids
# very short walks inside stations that give a false sense of accuracy.
walking.duration.minimum=${WALKING_DURATION_MINIMUM:60}
# ==============================================
# RAPTOR
# ==============================================
# Number of dates surrounding the queried date should be included in the scan. This is useful if the previous GTFS
# service day includes trips on the queried date. Or the connection is so long that it continues into the next service
# day. The default value is 3, which includes the previous, current, and next service day.
raptor.days.to.scan=${RAPTOR_DAYS_TO_SCAN:3}
# Maximum range of departures / or arrivals to scan to reduce the travel time while routing (a.k.a. range Raptor).
# Values smaller than 1 are allowed and imply using the standard Raptor algorithm. The default value is -1.
raptor.range=${RAPTOR_RANGE:-1}
# ==============================================
# CACHE
# ==============================================
# Number of service day instances to cache. For each service day, a new stop time array / trip mask is needed, which
# consumes resources while building. Therefore, trip masks and stop time int arrays are cached grouped by service id.
# (e.g. if all Mondays in the schedule have the same active services only one instance for all Mondays is cached).
cache.service.day.size=${CACHE_SERVICE_DAY_SIZE:5}
# Cache eviction strategy: LRU (Least Recently Used) or MRU (Most Recently Used).
cache.eviction.strategy=${CACHE_EVICTION_STRATEGY:LRU}
